import requests
import zipfile
import py7zr
import ctypes
from ctypes import wintypes
import os

script_dir = os.path.dirname(__file__)
malware_lab_files_dir = os.path.join(script_dir, "..", "malware_lab_files")
malware_dir = os.path.join(malware_lab_files_dir, "binaries")

AMSI_RESULT_DETECTED = 32768

def get_encrypted_archive(
        link: str = None,
        user_agent: str = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
        password: str = 'infected',
        remove_archive: bool = None,
        print_warning: bool = True
) -> bytes:
    if link.startswith("http://") or link.startswith("https://"):
        archive_name = link.split("/")[-1]
        with requests.get(link, headers={"User-Agent": user_agent}) as response:
            response.raise_for_status()
            archive = response.content
        
        with open(archive_name, "wb") as f:
            f.write(archive)
        if remove_archive is None:
            remove_archive = True
    else:
        archive_name = link
        if remove_archive is None:
            remove_archive = False
    
    if archive_name.endswith(".7z"):
        with py7zr.SevenZipFile(archive_name, "r", password=password) as archive:
            try:
                # vx-underground has single file <hash>.7z with <hash> inside
                file_hash = os.path.basename(archive_name).replace(".7z", "")
                content = archive.read(targets=[file_hash])[file_hash].read()
            except KeyError:
                if print_warning:
                    print(f"[-] File {file_hash} not found in archive {archive_name}, providing all files as {{<file_name>: <file_content>}}")
                io_dict = archive.read(archive.getnames())
                content = {file: io_dict[file].read() for file in io_dict}

    elif archive_name.endswith(".zip"):
        # other sources, multiple files
        with zipfile.ZipFile(archive_name, "r") as archive:
            archive.setpassword(password.encode())
            content = {file: archive.read(file) for file in archive.namelist()}
    else:
        raise ValueError(f"[-] archive must be .7z or .zip, got: {archive_name}")

    if remove_archive:
        os.remove(archive_name)

    return content

def asmi_scan(buffer):
    # Load AMSI.dll
    amsi = ctypes.WinDLL("amsi.dll")

    # Define necessary functions
    AmsiInitialize = amsi.AmsiInitialize
    AmsiInitialize.argtypes = [ctypes.wintypes.LPCWSTR, ctypes.POINTER(ctypes.c_void_p)]
    AmsiInitialize.restype = ctypes.HRESULT

    AmsiUninitialize = amsi.AmsiUninitialize
    AmsiUninitialize.argtypes = [ctypes.c_void_p]
    AmsiUninitialize.restype = None

    AmsiOpenSession = amsi.AmsiOpenSession
    AmsiOpenSession.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_void_p)]
    AmsiOpenSession.restype = ctypes.HRESULT

    AmsiCloseSession = amsi.AmsiCloseSession
    AmsiCloseSession.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    AmsiCloseSession.restype = None

    AmsiScanBuffer = amsi.AmsiScanBuffer
    AmsiScanBuffer.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_size_t, wintypes.LPCWSTR, ctypes.c_void_p, ctypes.POINTER(ctypes.c_int)]
    AmsiScanBuffer.restype = ctypes.HRESULT

    # Initialize AMSI
    context = ctypes.c_void_p()
    AmsiInitialize("MyApplicationName", ctypes.byref(context))

    # Open an AMSI session
    session = ctypes.c_void_p()
    AmsiOpenSession(context, ctypes.byref(session))

    # Prepare the buffer to scan (example content)
    result = ctypes.c_int()

    # Scan the buffer
    AmsiScanBuffer(context, buffer, len(buffer), "example.txt", session, ctypes.byref(result))
    # print("Threshold: ", AMSI_RESULT_DETECTED)
    # print(result.value)

    # Close the session and uninitialize AMSI
    AmsiCloseSession(context, session)
    AmsiUninitialize(context)

    # Check the result
    detected = True if result.value >= AMSI_RESULT_DETECTED else False
    return result.value, detected


for file in os.listdir(malware_dir):
    file_path = os.path.join(malware_dir, file)
    bytez = get_encrypted_archive(file_path, print_warning=False)
    if isinstance(bytez, bytes):
        file_name = os.path.basename(file_path)
        print(file_name, asmi_scan(bytez))
    else:
        for file_name, content in bytez.items():
            print(file_name, asmi_scan(content))